#include <grrlib.h>

#include <stdlib.h>
#include <math.h>
#include <malloc.h>
#include <libgctools.h>

// Include Graphics
#include "logo_png.h"
#include "font_png.h"
#include "font3d_png.h"
#include "scroller.h"

#define BBA_DEBUG false
#define TRACE_PORT 10000
#define TRACE_IP "192.168.1.53"
#define TEXT "       TRSI IS BACK AGAIN WITH A NEW INTRO FOR THE GAMECUBE!!!! HI TO ALL MY TRSI FRIENDS!  "
#define SCROLL_SPEED 6
#define SCROLL_INTERLACE 10

// Callback
static void return_to_loader (void) {
    return_to_gclink("fat:/gclink.dol");
  	void (*reload)() = (void(*)()) 0x80001800;
  	reload ();
}

static void reset_cb(u32 irq, void* ctx) {
  	return_to_loader();
}



int main(int argc, char *argv[]) {

    float a=0;
    u32 col[3] = {0xFFFFFFFF, 0xAAAAAAFF, 0x666666FF};
    int cubeZ=0;
    GRRLIB_texImg * logo_background;
    GRRLIB_texImg * text_font;
    GRRLIB_texImg * scroll_font;
    GRRLIB_texImg * tex_screen1;
    GRRLIB_texImg * tex_screen2;

    int alpha = 1;
    int alpha_dir = 1;
    u8 mirror_alpha = 0x60;
    char text[] = TEXT;
    t_scroller * scroller;

    // debug
    if(BBA_DEBUG) {
        setup_bba_logging(TRACE_PORT, TRACE_IP, KPRINTF, FALSE, argv);
	    kprintf("BBA Traces enabled\n");
    }
    else {
        GRRLIB_GeckoInit();
        GRRLIB_GeckoPrintf("Gecko debug inabled\n");
    }
    SYS_SetResetCallback(reset_cb);
    atexit(return_to_loader);

    GRRLIB_Init();
    PAD_Init();

    // Load textures
    logo_background = GRRLIB_LoadTexturePNG(logo_png);
    text_font = GRRLIB_LoadTexture(font_png);
    scroll_font = GRRLIB_LoadTexture(font3d_png);

    // Tilesets
    GRRLIB_InitTileSet(text_font, 16, 16, 32);
    GRRLIB_InitTileSet(scroll_font, 64, 64, 32);

    // Scroller
    scroller = create_scroller(scroll_font, SCROLL_SPEED, SCROLL_INTERLACE, 0, 0, text);
    // scroller = create_scroller(scroll_font, SCROLL_SPEED, SCROLL_INTERLACE, 0, (rmode->efbHeight - scroll_font->tileh), text);

    // texture2screen
    tex_screen1 = GRRLIB_CreateEmptyTexture(rmode->fbWidth, 64 /*rmode->efbHeight*/);
    tex_screen2 = GRRLIB_CreateEmptyTexture(rmode->fbWidth, 64 /*rmode->efbHeight*/);

    GRRLIB_Settings.antialias = true;

    GRRLIB_SetBackgroundColour(0x00, 0x00, 0x00, 0xFF);
    GRRLIB_Camera3dSettings(0.0f, 0.0f, 13.0f, 0,1,0, 0,0,0);

    while(1) {

        GRRLIB_FillScreen(0x0);

        // Resetting Vars
        GRRLIB_SetBlend( GRRLIB_BLEND_ALPHA );

        // Switch To 2D Mode to display text and background
        GRRLIB_2dMode();

        // scroller in a render target
        GRRLIB_CompoStart();
            display_scroll(scroller);
        GRRLIB_CompoEnd(0, 0, tex_screen1);

        // Drawing Background and text
        GRRLIB_DrawImg( 0, 0, logo_background, 0, 1, 1, RGBA(255, 255, 255, alpha) );
        GRRLIB_Printf((640-(16*29))/2, 20, text_font, 0xFFFFFFFF, 1, "PRESS A OR B TO ZOOM THE CUBE");

        // GRRLIB_DrawImg(0, (rmode->efbHeight - scroll_font->tileh), tex_screen, 0, 1, 1, 0xFFFFFFFF);
        GRRLIB_DrawImg(0, (rmode->efbHeight - scroll_font->tileh - 40), tex_screen1, 0, 1, 1, 0xFFFFFFFF);

        GRRLIB_BMFX_FlipV(tex_screen1, tex_screen2);
        GRRLIB_FlushTex(tex_screen2);

        GRRLIB_DrawImg(0, (rmode->efbHeight - 40), tex_screen2, 0, 1, 0.5, 0xFFFFFF00 + mirror_alpha);

        // Switch To 3D Mode
        GRRLIB_3dMode(0.1, 1000, 45, 0, 0);

        GRRLIB_ObjectView(0,0,cubeZ, a,a*2,a*3,1,1,1);
        GX_Begin(GX_QUADS, GX_VTXFMT0, 24);
            GX_Position3f32(-1.0f,1.0f,-1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(-1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(1.0f,1.0f,-1.0f);
            GX_Color1u32(col[0]);

            GX_Position3f32(-1.0f,1.0f,1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(-1.0f,-1.0f,1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(1.0f,-1.0f,1.0f);
            GX_Color1u32(col[0]);
            GX_Position3f32(1.0f,1.0f,1.0f);
            GX_Color1u32(col[0]);

            GX_Position3f32(-1.0f,1.0f,1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(1.0f,1.0f,1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(1.0f,1.0f,-1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(-1.0f,1.0f,-1.0f);
            GX_Color1u32(col[1]);

            GX_Position3f32(-1.0f,-1.0f,1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(1.0f,-1.0f,1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[1]);
            GX_Position3f32(-1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[1]);

            GX_Position3f32(-1.0f,1.0f,1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(-1.0f,1.0f,-1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(-1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(-1.0f,-1.0f,1.0f);
            GX_Color1u32(col[2]);

            GX_Position3f32(1.0f,1.0f,1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(1.0f,1.0f,-1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(1.0f,-1.0f,-1.0f);
            GX_Color1u32(col[2]);
            GX_Position3f32(1.0f,-1.0f,1.0f);
            GX_Color1u32(col[2]);
        GX_End();

        GRRLIB_Render();

        // process events
        PAD_ScanPads();
        if (PAD_ButtonsDown(0) & PAD_BUTTON_START) {
            break;
        }
        else if (PAD_ButtonsDown(0) & PAD_BUTTON_UP) {
            cubeZ++;
        }
        else if (PAD_ButtonsDown(0) & PAD_BUTTON_DOWN) {
            cubeZ--;
        }
        else if (PAD_ButtonsDown(0) & PAD_BUTTON_RIGHT) {
            mirror_alpha=(mirror_alpha==255)?255:mirror_alpha+1;
            GRRLIB_GeckoPrintf("mirror_alpha: %d\n", mirror_alpha);
        }
        else if (PAD_ButtonsDown(0) & PAD_BUTTON_LEFT) {
            mirror_alpha=(mirror_alpha==0)?0:mirror_alpha-1;
            GRRLIB_GeckoPrintf("mirror_alpha: %d\n", mirror_alpha);
        }
        else if (PAD_ButtonsDown(0) & PAD_TRIGGER_Z) {
            return_to_gclink("fat:/gclink.dol");
        }

        // update screen
        if(alpha <= 0 || alpha >= 255)
            alpha_dir = -alpha_dir;
        alpha += alpha_dir;
        a+=0.5f;
        update_scroll(scroller);
    }

    // free stuff
    free_scroller(scroller);
    GRRLIB_FreeTexture(text_font);
    GRRLIB_FreeTexture(scroll_font);
    GRRLIB_FreeTexture(logo_background);
    GRRLIB_FreeTexture(tex_screen1);
    GRRLIB_FreeTexture(tex_screen2);
    GRRLIB_Exit(); // Be a good boy, clear the memory allocated by GRRLIB

    exit(0);
}
